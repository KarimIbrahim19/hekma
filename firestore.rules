/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership and pharmacy-ownership model,
 *              allowing users to manage their own profiles and pharmacies to manage their related data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, owned by the user with ID {userId}.
 * - /pharmacies/{pharmacyId}: Stores pharmacy information.
 * - /pharmacies/{pharmacyId}/statements/{statementId}: Stores statements related to a pharmacy, accessible only by the pharmacy owner.
 * - /products/{productId}: Stores medicine product information, publicly readable.
 * - /pharmacies/{pharmacyId}/invoices/{invoiceId}: Stores invoices related to a pharmacy, accessible only by the pharmacy owner.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data.
 * - Pharmacies can only access their own statement and invoice data.
 * - Product data is publicly readable.
 * - All write operations require authentication.
 * - Listing of user documents is denied to prevent information disclosure.
 *
 * Denormalization for Authorization:
 * - The 'pharmacyId' is denormalized within UserProfile, Statement, and Invoice documents to enable authorization checks without additional queries.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile data, ensuring only the owner can read and write.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' can create a profile with id: 'user_abc'.
     * @allow (get, update, delete) User with UID 'user_abc' can get, update, and delete their profile at /users/user_abc.
     * @deny (create) User with UID 'user_xyz' cannot create a profile with id: 'user_abc'.
     * @deny (get, update, delete) User with UID 'user_xyz' cannot get, update, or delete the profile at /users/user_abc.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Helper function to check if the request is made by the owner.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the user exists and is the owner.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages pharmacy data.
     * @path /pharmacies/{pharmacyId}
     * @allow (get, list) Any authenticated user can read pharmacy data.
     * @allow (create) Authenticated user can create a pharmacy.
     * @deny (update, delete) Only the owner can update and delete a pharmacy.
     * @principle Authenticated users can read pharmacy data, but only the owner can modify it.
     */
    match /pharmacies/{pharmacyId} {
       function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages statements for a specific pharmacy, accessible only by the pharmacy owner.
     * @path /pharmacies/{pharmacyId}/statements/{statementId}
     * @allow (get, list) Pharmacy owner can read statements.
     * @allow (create) Pharmacy owner can create statements.
     * @deny (update, delete) Only the owner can update and delete statements.
     * @principle Enforces pharmacy ownership for statements.
     */
    match /pharmacies/{pharmacyId}/statements/{statementId} {
        function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages medicine product data, which is publicly readable.
     * @path /products/{productId}
     * @allow (get, list) Any user can read product data.
     * @deny (create, update, delete) Only authorized users can create, update, and delete product data.
     * @principle Allows public read access to product information.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages invoices for a specific pharmacy, accessible only by the pharmacy owner.
     * @path /pharmacies/{pharmacyId}/invoices/{invoiceId}
     * @allow (get, list) Pharmacy owner can read invoices.
     * @allow (create) Pharmacy owner can create invoices.
     * @deny (update, delete) Only the owner can update and delete invoices.
     * @principle Enforces pharmacy ownership for invoices.
     */
    match /pharmacies/{pharmacyId}/invoices/{invoiceId} {
       function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}